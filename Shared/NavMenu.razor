@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Portail_OptiVille.Data.Utilities
@using Portail_OptiVille.Data.Models
@inject ProtectedSessionStorage protectedSessionStorage
@inject NavigationManager NavigationManager
@inject ICookie cookie
@inject A2024420517riGr1Eq6Context _context
@inject JwtTokenGenerator tokenGenerator


<div class="top-row ps-3 navbar navbar-vert navbar-expand-lg">
    <div class="container-fluid">
        <a class="navbar-brand" href="https://www.v3r.net"><img src="/images/v3r-logo-avec-carre-blanc.png" class="mt-0 mt-lg-3 mt-xl-3" style="height: 100px;" alt="V3R"></a>
        <button title="Navigation menu" class="navbar-toggler" type="button" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass collapse navbar-collapse">
    <nav class="flex-column justify-content-between pt-xl-3 pt-lg-3 pt-0">
        <div >
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="recherche">
                    <span class="bi bi-search me-2 ms-4" aria-hidden="true"></span> Recherche
                </NavLink>
            </div>
            @if(niveauAcces == 3)
            {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="gestionUser">
                    <span class="bi bi-people-fill me-2 ms-4" aria-hidden="true"></span>Gestion utilisateurs
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="config">
                    <span class="bi bi-gear-fill me-2 ms-4" aria-hidden="true"></span>Paramètres
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="modele">
                    <span class="bi bi-envelope-fill me-2 ms-4" aria-hidden="true"></span>Modèle de courriels
                </NavLink>
            </div>
            }
        </div>
        <div>
            <div class="nav-item px-3">
                <button class="btn bg-vert text-white texte-bold" style="width: 200px" @onclick="Deconnexion"><i class="bi bi-box-arrow-left me-1"></i>Déconnexion</button>
            </div> 
        </div> 
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : "show";
    private int niveauAcces = 0;
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private RoleChecker _roleChecker;
    private async Task<bool> CheckRole(string role)
    {
        _roleChecker = new RoleChecker(protectedSessionStorage, cookie, tokenGenerator);
        return await _roleChecker.CheckRole(role);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
        _roleChecker = new RoleChecker(protectedSessionStorage, cookie, tokenGenerator);
        niveauAcces = await _roleChecker.GetNiveauAcces();
        StateHasChanged();
        }
    }
    private async Task Deconnexion()
    {
        Usersession[] usersessions;
        string email;

        var result = await protectedSessionStorage.GetAsync<string>("Email"); // Je vais chercher le mail dans le protectedSessionStorage

        email = result.Value;
        usersessions = _context.Usersessions.Where(u => u.OwnerEmail == email).ToArray();
        if(usersessions.Length > 0)
        {
            foreach (var usersession in usersessions)
            {
                _context.Usersessions.Remove(usersession);
            }
            await _context.SaveChangesAsync();    

            await protectedSessionStorage.DeleteAsync("Email");
            await cookie.destroy("SToken");
        }
        else
        {
            var token = await cookie.GetValue("SToken");
            if(!string.IsNullOrEmpty(token))
            {
                email = tokenGenerator.GetValueFromToken(token);
                usersessions = _context.Usersessions.Where(u => u.OwnerEmail == email).ToArray();
                foreach (var usersession in usersessions)
                {
                    _context.Usersessions.Remove(usersession);
                }
                await _context.SaveChangesAsync();
            }
            
            await protectedSessionStorage.DeleteAsync("Email");
            await cookie.destroy("SToken");
        } 


        // usersessions = _context.Usersessions.Where(u => u.OwnerEmail == email).ToArray();
        // foreach (var usersession in usersessions)
        // {
        //     _context.Usersessions.Remove(usersession);
        // }
        // await _context.SaveChangesAsync();
        
        NavigationManager.NavigateTo("/", true);
    }  
}
