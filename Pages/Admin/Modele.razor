@page "/modele"
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@inject List<Portail_OptiVille.Data.Utilities.Modele> listModele
@inject IJSRuntime JSRuntime
@*@inject Portail_OptiVille.Data.Utilities.Modele modeleClass*@
@inject IHostEnvironment hostEnvironment

<PageTitle>Gestion des courriels</PageTitle>
    <div class="row d-flex justify-content-center">
        <div class="col-xl-11 col-lg-11 col-12 col-sm-12 py-2">
            <div class="card">
                <div class="card-header py-2 bg-vertFonce">
                    <h3 class="py-2 my-0 text-white titre-bold">Modèles de courriels</h3>
                </div>
                <div class="card-body border-vertFonce py-1">
                <div>
                    <div class="form-group col-xl-3 col-lg-3 col-3 col-sm-6 py-2">
                        <label for="exampleFormControlSelect1" class="vertFonce texte-bold">Choix du modèle</label>
                        <select @onchange="OnModeleChanged" class="form-select form-control input-vert texte-light" id="exampleFormControlSelect1">
                            @if (selectedId == 0)
                                {
                                    <option selected hidden>Choisir un modèle</option>
                                }
                            @foreach(var modele in listModele)
                            {
                                <option value="@modele.Id">@modele.Nom</option>
                            }
                        </select>
                    </div>
                    @if(selectedNom == null && selectedObjet == null && selectedMessage == null)
                    {

                    }
                    else
                    {
                        <div class="col-xl-6 col-lg-6 col-6 col-sm-6 py-1">
                            <label for="objetCourriel" class="vertFonce texte-bold pt-2">Objet</label>
                            <InputText @bind-Value="selectedObjet" type="text" class="form-control input-vert texte-light" id="objetCourriel" readonly="@(!isEditing)" />
                        </div>
                        <div class="col-xl-9 col-lg-9 col-9 col-sm-6 py-1">
                            <label for="messageCourriel" class="vertFonce texte-bold pt-2">Message</label>
                            <InputTextArea @bind-Value="selectedMessage" type="text-area" class="form-control input-vert texte-light" rows="6" id="messageCourriel" style="resize: none;" readonly="@(!isEditing)" />
                        </div>
                    }
                </div>
            </div>   
            <div>
                <div class="card-footer bg-vertFonce d-flex justify-content-center">
                    @if(!isCreating)
                    {
                        <button class="btn bg-vert texte-medium text-white me-1" style="width: 200px;" id="btnVert" data-bs-toggle="modal" data-bs-target="#exampleModalCenter" @onclick="() => CreateModele(true)"><i class="bi bi-plus-circle me-1"></i>Ajouter</button>
                    }
                    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header bg-vertFonce">
                                <h5 class="py-2 p-0 my-0 text-white titre-30bold" id="exampleModalLongTitle">Ajout d'un nouveau modèle</h5>
                            </div>
                            <EditForm Model="AjouteModel" OnValidSubmit="SaveCreateModele">
                                <DataAnnotationsValidator/>
                                <div class="modal-body">
                                    <div class="form-group">
                                        <label for="AjoutNom" class="vertFonce texte-bold">Nom</label>
                                        <InputText @bind-Value="AjouteModel.NomNewModele" id="AjoutNom" type="text" class="form-control input-vert texte-light"/>
                                        <ValidationMessage For="@(() => AjouteModel.NomNewModele)" />
                                    </div>
                                    <div class="form-group pt-2">
                                        <label for="AjoutObjet" class="vertFonce texte-bold">Objet</label>
                                        <InputText @bind-Value="AjouteModel.ObjetNewModele" id="AjoutObjet" type="text" class="form-control input-vert texte-light" />
                                        <ValidationMessage For="@(() => AjouteModel.ObjetNewModele)" />
                                    </div>
                                    <div class="form-group pt-2">
                                        <label for="AjoutMessage" class="vertFonce texte-bold">Message</label>
                                        <InputTextArea @bind-Value="AjouteModel.MessageNewModele" id="AjoutMessage" type="text-area" class="form-control input-vert texte-light" rows="6" style="resize: none;" />
                                        <ValidationMessage For="@(() => AjouteModel.MessageNewModele)" />
                                    </div>
                                </div>
                                <div class="modal-footer bg-vertFonce d-flex justify-content-center">
                                    <button type="submit" class="btn bg-vert texte-medium text-white" id="btnVert" style="width: 200px;"><i class="bi bi-floppy me-1"></i>Sauvegarder</button>
                                    <button type="button" class="btn bg-vert texte-medium text-white me-1" id="btnVert" style="width: 200px;" data-bs-dismiss="modal" @onclick="() => CreateModele(false)"><i class="bi bi-x-circle me-1"></i>Annuler</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                    </div>

                    @if (!isEditing)
                    {
                        if(selectedId != 0)
                        {
                        <button class="btn bg-vert texte-medium text-white me-1" style="width: 200px;" id="btnVert" @onclick="EditConfig"><i class="bi bi-pencil me-1"></i>Modifier</button>
                        }
                    }
                    else
                    {
                        <button class="btn bg-vert texte-medium text-white me-1" style="width: 200px;" id="btnVert" @onclick="SaveConfig"><i class="bi bi-floppy me-1"></i>Sauvegarder</button>
                        <button class="btn bg-danger texte-medium text-white" style="width: 200px;" @onclick="DeleteConfig"><i class="bi bi-trash3 me-1"></i>Supprimer</button>
                    }
                </div>

                @if (saveSuccess)
                {
                    <div class="alert alert-success mt-3">La configuration a été sauvegardée!</div>
                }
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="js/modal.js"></script>
@code {
    private bool isEditing = false;
    private bool saveSuccess = false;
    private bool isCreating = false;
    private string? selectedNom;
    private string? selectedObjet;
    private string? selectedMessage;
    private int selectedId =0;

    private ModeleAjouteModel AjouteModel = new ModeleAjouteModel();
    private class ModeleAjouteModel
    {
        [Required(ErrorMessage = "Veuillez mettre un nom à ce modèle")]
        public string? NomNewModele { get; set; }
        [Required(ErrorMessage = "Veuillez mettre un objet au modèle")]
        public string? ObjetNewModele { get; set; }
        [Required(ErrorMessage = "Veuillez mettre un message")]
        public string? MessageNewModele { get; set; }
    }

    private void CreateModele(bool save)
    {
        if(save)
        {
        isCreating = true;
        AjouteModel = new ModeleAjouteModel();
        }
        else
        {
        isCreating = false;
        }
    }
    private void EditConfig()
    {
        isEditing = true;
    }
    private void OnModeleChanged(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out selectedId))
        {
            var index = listModele.FindIndex(modele => modele.Id == selectedId);
            selectedNom = listModele[index].Nom;
            selectedObjet = listModele[index].Objet;
            selectedMessage = listModele[index].Message;
        }
    }
    private async Task SaveCreateModele()
    {
        isCreating = false;
        var newModele = new Portail_OptiVille.Data.Utilities.Modele(listModele.Count+1,AjouteModel.NomNewModele!,AjouteModel.ObjetNewModele!,AjouteModel.MessageNewModele!);
        listModele.Add(newModele);
        try
        {
            await JSRuntime.InvokeVoidAsync("hideMyModal");
        }
        catch (JSDisconnectedException)
        {
            Console.WriteLine("JavaScript interop call failed due to disconnection.");
        }
        
        await SaveOnJson(); 
    }

    private async Task DeleteConfig()
    {
        isCreating = false;
        var index = listModele.FindIndex(modele => modele.Id == selectedId);
        listModele.RemoveAt(index);
        selectedId = 0;
        selectedNom = null;
        selectedObjet = null;
        selectedMessage = null;
        StateHasChanged();
        await SaveOnJson(); 
    }

    private async Task SaveOnJson()
    {
        var filePath = Path.Combine(hostEnvironment.ContentRootPath, "wwwroot", "Modele.json");
        var json = JsonSerializer.Serialize(listModele, new JsonSerializerOptions { WriteIndented = true });

        await File.WriteAllTextAsync(filePath, json);

        isEditing = false; 
        saveSuccess = true;
        StateHasChanged();
        await Task.Delay(4000);
        saveSuccess = false;
        StateHasChanged();
    }
    private async Task SaveConfig()
    {
        listModele[selectedId-1].Nom = selectedNom!;
        listModele[selectedId-1].Objet = selectedObjet!;
        listModele[selectedId-1].Message = selectedMessage!;
        await SaveOnJson();
    }
}