@using Portail_OptiVille.Data.FormModels
@using System.Linq.Expressions
@using Portail_OptiVille.Data.Attributes
@inject ListeVillesAPI listeVillesAPI
@inject IJSRuntime JSRuntime

<PageTitle>Étape 2 Coordonnées</PageTitle>
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white titre-bold">Coordonnées de l'entreprise</h3>
    </div>
        <div class="card-body border-bleuFonce bg-blanc py-1">
            <div class="row py-2 d-flex align-baseline">
                <div class="col-xl-4 col-lg-4 col-5 col-sm-5">
                    <label class="bleuFonce texte-bold" for="No">&#8470; civique <i class="bi bi-braces-asterisk text-danger"></i></label>
                    <input type="text" @bind="CoordonneeFormModel.NoEntreprise" maxlength="8" class="form-control @GetInputClass(() => CoordonneeFormModel.NoEntreprise) input-bleu texte-light" id="No" />
                    @((MarkupString)GetValidationHTML(() => CoordonneeFormModel.NoEntreprise))
                </div>
                <div class="col-xl-5 col-lg-5 col-7 col-sm-7">
                    <label class="bleuFonce texte-bold" for="Rue">Rue <i class="bi bi-braces-asterisk text-danger"></i></label>
                    <input type="text" @bind="CoordonneeFormModel.RueEntreprise" maxlength="64" class="form-control @GetInputClass(() => CoordonneeFormModel.RueEntreprise) input-bleu texte-light" id="Rue" />
                    @((MarkupString)GetValidationHTML(() => CoordonneeFormModel.RueEntreprise))
                </div>
            </div>
            <div class="col-xl-3 col-lg-3 col-6 col-sm-6 py-2">
                <label class="bleuFonce texte-bold" for="Bureau">Bureau</label>
                <input type="text" @bind="CoordonneeFormModel.BureauEntreprise" maxlength="8" class="form-control @GetInputClass(() => CoordonneeFormModel.BureauEntreprise) input-bleu texte-light" id="Bureau" />
                @((MarkupString)GetValidationHTML(() => CoordonneeFormModel.BureauEntreprise))
            </div>
            <div class="row d-flex align-baseline">
                <div class="col-xl-6 col-lg-6 col-12 col-sm-12 py-2">
                    <label class="bleuFonce texte-bold" for="Ville">Ville <i class="bi bi-braces-asterisk text-danger"></i></label>
                    <select class="@GetInputClass(() => CoordonneeFormModel.VilleEntreprise) form-select input-bleu texte-light" id="Ville" @bind="CoordonneeFormModel.VilleEntreprise">
                        <option value="" disabled selected>Veuillez choisir une ville</option>
                        @foreach (string city in cities)
                        {
                            <option value="@city">@city</option>
                        }
                    </select>
                @((MarkupString)GetValidationHTML(() => CoordonneeFormModel.VilleEntreprise))
                </div>
                <div class="col-xl-5 col-lg-5 col-12 col-sm-12 py-2">
                    <label class="bleuFonce texte-bold" for="Province">Province <i class="bi bi-braces-asterisk text-danger"></i></label>
                    <select class="@GetInputClass(() => CoordonneeFormModel.ProvinceEntreprise) form-select input-bleu texte-light" id="Province" @bind="CoordonneeFormModel.ProvinceEntreprise">
                        <option value="" disabled selected>Veuillez choisir une province</option>
                        @foreach (string province in listeProvinces)
                        {
                            <option value="@province">@province</option>
                        }
                    </select>
                    @((MarkupString)GetValidationHTML(() => CoordonneeFormModel.ProvinceEntreprise))
                </div>
                <div class="row d-flex align-baseline">
                    <div class="col-xl-4 col-lg-4 col-6 col-sm-6 py-2">
                        <label class="bleuFonce texte-bold" for="CodePostal">Code Postal <i class="bi bi-braces-asterisk text-danger"></i></label>
                        <input type="text" @bind="CoordonneeFormModel.CodePostalEntreprise" maxlength="7" placeholder="A1A 1A1" class="form-control @GetInputClass(() => CoordonneeFormModel.CodePostalEntreprise) input-bleu texte-light" id="CodePostal" />
                        @((MarkupString)GetValidationHTML(() => CoordonneeFormModel.CodePostalEntreprise))
                    </div>
                    <div class="col-lg-7 col-xl-7 col-12 col-sm-12 py-2">
                        <label class="bleuFonce texte-bold" for="RegionAdm">Région Admnistrative <i class="bi bi-braces-asterisk text-danger"></i></label>
                        <select id="RegionAdm" @bind="CoordonneeFormModel.RegionAdmEntreprise" class="form-control @GetInputClass(() => CoordonneeFormModel.RegionAdmEntreprise) form-select input-bleu texte-light">
                            <option value="" disabled selected>Veuillez choisir une région administrative</option>
                            @foreach (string region in listeRegionADM)
                            {
                                <option value="@region">@region</option>
                            }
                        </select>
                        @((MarkupString)GetValidationHTML(() => CoordonneeFormModel.RegionAdmEntreprise))
                    </div>
                </div>

                </div>
            <div class="col-lg-7 col-xl-7 col-12 col-sm-12 py-2">
                <label class="bleuFonce texte-bold" for="SiteWeb">Site Internet</label>
                <input type="text" @bind="CoordonneeFormModel.SiteWebEntreprise" maxlength="64" class="form-control @GetInputClass(() => CoordonneeFormModel.SiteWebEntreprise) input-bleu texte-light" id="SiteWeb" />
                  @((MarkupString)GetValidationHTML(() => CoordonneeFormModel.SiteWebEntreprise))
            </div>
        </div>
        <div class="card-header py-2 bg-bleuFonce">
            <h3 class="py-2 p-0 my-0 text-white titre-bold">Téléphone(s)</h3>
        </div>
        <div class="card-body border-bleuFonce bg-blanc py-1">
        @{
            var phoneNo = 1;
            foreach (var phoneModel in CoordonneeFormModel.PhoneList)
            {
                <Telephone TelephoneNumber="@phoneNo" telephoneFormModel="@phoneModel" @ref="telephoneComponents[phoneModel]" />
                if (!(CoordonneeFormModel.PhoneList.Count == phoneNo)) {
                    <hr class="m-0">  
                }
                phoneNo++;        
            }
        }
        <div class="d-flex justify-content-center pb-2">
            <button type="button" class="btn bg-bleu text-white texte-bold me-2" id="btnBleu" @onclick="AddTelephone" style="width: 200px;" ><i class="bi bi-plus-circle"></i> Ajout</button>
            <button type="button" class="btn bg-danger text-white texte-bold" id="btnSupp" @onclick="RemoveTelephone" disabled="@(!(CoordonneeFormModel.PhoneList.Count > 1))" style="width: 200px;"><i class="bi bi-trash"></i> Retirer</button>
        </div>
    </div>
</EditForm>

<style>
    .valid {
        outline: 1px solid #26b050;
    } 
</style>

@code {
    [Parameter]
    public Action<CoordonneeForm>? AssignReference { get; set; }
    [Parameter]
    public CoordonneeFormModel CoordonneeFormModel { get; set; }
    private Dictionary<TelephoneFormModel, Telephone> telephoneComponents = new Dictionary<TelephoneFormModel, Telephone>();
    private EditContext editContext { get; set; }
    private List<string> cities = new List<string>();
    private bool isSubmit = false;

    private List<string> listeProvinces = new List<string>{"Québec", "Ontario", "Manitoba", "Saskatchewan", "Alberta", "Colombie-Britannique",
        "Île-du-Prince-Édouard", "Nouveau-Brunswick", "Nouvelle-Écosse", "Terre-Neuve-et-Labrador", "Nunavut", "Territoires du Nord-Ouest",
        "Yukon"};
    private List<string> listeRegionADM = new List<string>{"(01) Bas-Saint-Laurent", "(02) Saguenay-Lac-Saint-Jean", "(03) Capitale-Nationale",
        "(04) Mauricie", "(05) Estrie", "(06) Montréal", "(07) Outaouais", "(08) Abitibi-Témiscamingue", "(09) Côte-Nord", "(10) Nord-du-Québec",
        "(11) Gaspésie-Îles-de-la-Madeleine", "(12) Chaudière-Appalaches", "(13) Laval", "(14) Lanaudière", "(15) Laurentides", "(16) Montérégie",
        "(17) Centre-du-Québec"};

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(CoordonneeFormModel);
        editContext.OnValidationStateChanged += (sender, args) => StateHasChanged();
        AssignReference?.Invoke(this);
        if (!CoordonneeFormModel.PhoneList.Any()) {
            CoordonneeFormModel.PhoneList.Add(new TelephoneFormModel());
        }
        cities = await listeVillesAPI.GetVilles();
    }

    private string GetInputClass<TField> (Expression<Func<TField>> fieldExpression)
    {
        if (!isSubmit) {
            return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();

        // THERE'S PROBABLY A BETTER WAY TO DO THIS.
        if (string.IsNullOrEmpty(CoordonneeFormModel.BureauEntreprise))
        {
            if (fieldIdentifier.FieldName.Equals("BureauEntreprise"))
            {
                return isValid ? "" : "invalid";
            }
        }
        // THERE'S PROBABLY A BETTER WAY TO DO THIS.
        if (string.IsNullOrEmpty(CoordonneeFormModel.SiteWebEntreprise))
        {
            if (fieldIdentifier.FieldName.Equals("SiteWebEntreprise"))
            {
                return isValid ? "" : "invalid";
            }
        }

        return isValid ? "valid" : "invalid";
    }

    private string GetValidationHTML<TField> (Expression<Func<TField>> fieldExpression) 
    {
        if (!isSubmit) {
            return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();

        // THERE'S PROBABLY A BETTER WAY TO DO THIS.
        if (string.IsNullOrEmpty(CoordonneeFormModel.BureauEntreprise))
        {
            if (fieldIdentifier.FieldName.Equals("BureauEntreprise"))
            {
                return isValid ? "" : "<span class=\"input-group-text text-danger\"><i class=\"bi bi-x-circle me-2\"></i><span class=\"texte-medium\">" + editContext.GetValidationMessages(fieldIdentifier).FirstOrDefault() + "</span></span>";
            }
        }
        // THERE'S PROBABLY A BETTER WAY TO DO THIS.
        if (string.IsNullOrEmpty(CoordonneeFormModel.SiteWebEntreprise))
        {
            if (fieldIdentifier.FieldName.Equals("SiteWebEntreprise"))
            {
                return isValid ? "" : "<span class=\"input-group-text text-danger\"><i class=\"bi bi-x-circle me-2\"></i><span class=\"texte-medium\">" + editContext.GetValidationMessages(fieldIdentifier).FirstOrDefault() + "</span></span>";
            }
        }

        return isValid ? "<span class=\"input-group-text text-success\"><i class=\"bi bi-check-circle me-2\"></i><span class=\"texte-medium\">Valide</span></span>" 
                       : "<span class=\"input-group-text text-danger\"><i class=\"bi bi-x-circle me-2\"></i><span class=\"texte-medium\">" + editContext.GetValidationMessages(fieldIdentifier).FirstOrDefault() + "</span></span>";  
    }

    public bool TriggerValidation() 
    {
        isSubmit = true;
        StateHasChanged();
        var isAllPhonesValid = ValidatePhones();
        if (editContext.Validate() && isAllPhonesValid)
        {
            return true;
        }
        return false;
    }

    private void AddTelephone()
    {
        CoordonneeFormModel.PhoneList.Add(new TelephoneFormModel());
    }

    private void RemoveTelephone()
    {
        if (CoordonneeFormModel.PhoneList.Count > 1) {
            CoordonneeFormModel.PhoneList.RemoveAt(CoordonneeFormModel.PhoneList.Count - 1);
        }
    }

    public bool ValidatePhones()
    {
        bool isValid = true;
        foreach (var component in telephoneComponents.Values) {
            var phoneState = component.TriggerValidation();
            if (!phoneState) {
                isValid = false;
            }
        }
        return isValid;
    }
}