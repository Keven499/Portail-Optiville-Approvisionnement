@page "/demandeFournisseur"
@using Portail_OptiVille.Data.FormModels
@using Portail_OptiVille.Pages.Fournisseur.Inscription.Contact
@using Portail_OptiVille.Pages.Fournisseur.Inscription.Coordonnee
@using Portail_OptiVille.Pages.Fournisseur.Inscription
@using Portail_OptiVille.Data.Models
@using Portail_OptiVille.Data.Services
@using Microsoft.EntityFrameworkCore;
@using System.Timers
@using Microsoft.AspNetCore.Components.Web
@inject A2024420517riGr1Eq6Context _context
@inject IJSRuntime JS
@inject FournisseurService fournisseurService
@inject ContactsService contactsService
@inject CoordonneeService coordonneeService
@inject FichierService fichierService
@inject IdentificationService identificationService
@inject LicenceRBQService licenceRBQService
@inject ProduitServiceService produitServiceService
@inject HistoriqueService historiqueService

<PageTitle>Demande fournisseur</PageTitle>

<div class="form-group container-fluid ">
    <div class="row">
        <div class="col-12">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 80vh; position: relative;">
                    <div class="spinner-border text-primary me-2" role="status"></div>
                    <div class="d-flex flex-column">
                        <span class="titre-medium fs-3">Chargement en cours..</span>
                        <div style="position: relative;">
                            @if (showMessage)
                            {
                                // PETIT MESSAGE POUR AVISER QU'UN PROBLÈME EST SURVENU SI LA BD NE SE LOAD PAS, CAR SERVEUR CRASH
                                <span class="titre-medium text-danger fs-5" style="position: absolute; top: 100%; left: 0;">Un problème est survenu</span>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row d-flex justify-content-center mb-1">
                    <div class="col-xl-11 col-lg-11 col-sm-12 col-12">
                        <div>   
                            <div class="texte-bold">Obligatoire: <i class="bi bi-braces-asterisk text-danger"></i></div> 
                        </div>
                    </div>
                </div>
                
                <div class="row d-flex justify-content-center">

                    <div class="col-xl-11 col-lg-11 col-sm-12 col-12">
                        <div class="progress mb-2 texte-bold">
                            <div class="bg-bleuFonce progress-bar progress-bar-striped rounded text-white texte-medium" role="progressbar" 
                                style="width: @ProgressPercentage%;" aria-valuenow="@ProgressPercentage" aria-valuemin="0" aria-valuemax="100">
                                @currentStep sur @totalSteps
                            </div>
                        </div>
                        <div class="card">
                            @Components[currentIndex]
                            <div class="card-footer bg-bleuFonce d-flex justify-content-center">
                                <button @onclick="ShowPrevious" disabled="@isFirstComponent" class="btn bg-bleu text-white texte-medium"  id="btnBleu" style="width: 200px;">
                                    <i class="bi bi-arrow-left-circle"></i> Précédent 
                                </button>
                                @if (currentIndex == 4 && !IsRBQAnyFieldChange)
                                {
                                    <button @onclick="ShowNext" class="btn bg-warning text-white texte-medium ms-2" style="width: 200px;">
                                        Passer
                                        <i class="bi bi-arrow-right-circle"></i>
                                    </button>
                                } 
                                else if(currentIndex == 5)
                                {
                                    <button @onclick="ShowNext" class="btn bg-bleu text-white texte-medium ms-2" id="btnBleu" style="width: 200px;">
                                        <i class="bi bi-floppy me-1"></i>Enregistrer                                        
                                    </button>
                                }
                                else
                                {
                                    <button @onclick="ShowNext" class="btn bg-bleu text-white texte-medium ms-2" id="btnBleu" style="width: 200px;">
                                        Suivant
                                        <i class="bi bi-arrow-right-circle"></i>
                                    </button>
                                }
                            </div>
                        </div>                    
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private bool showMessage = false;
    private Timer loadingTimer;
    private LicenceRBQFormModel licenceRBQFormModel = new LicenceRBQFormModel();
    private LicenceRBQ? licenceRBQRef;
    private List<Categorierbq> allCategories = new List<Categorierbq>();

    private IdenticationFormModel identicationFormModel = new IdenticationFormModel();
    private IdentificationForm? identificationRef;

    private CoordonneeFormModel coordonneeFormModel = new CoordonneeFormModel();
    private CoordonneeForm? coordoneeRef;

    private ContactHosterFormModel contactHosterFormModel = new ContactHosterFormModel();
    private ContactFormHoster? contactHosterRef;

    private ProduitServiceFormModel produitServiceFormModel = new ProduitServiceFormModel();
    private ProduitsServices? produitServiceRef;

    private PieceJointeFormModel pieceJointeFormModel = new PieceJointeFormModel();

    private List<Produitservice> allProduitService = new List<Produitservice>();
    private List<Categorieunspsc> categorieUNSPSC = new List<Categorieunspsc>();

    private List<RenderFragment> Components { get; set; } = new List<RenderFragment>();
    private bool isFirstComponent => currentIndex == 0;
    private bool _isRBQAnyFieldChange = false;
    public bool IsRBQAnyFieldChange
    {
        get => _isRBQAnyFieldChange;
        set
        {
            if (_isRBQAnyFieldChange != value)
            {
                _isRBQAnyFieldChange = value;
                StateHasChanged();
            }
        }
    }
    private int currentIndex = 0;
    private int currentStep => currentIndex + 1;
    private int totalSteps => Components.Count;
    private string ProgressPercentage => ((double)currentStep / totalSteps * 100).ToString("F2").Replace(',', '.');

    protected override async Task OnInitializedAsync()
    {
        loadingTimer = new Timer(7000); 
        loadingTimer.Elapsed += OnLoadingTimerElapsed;
        loadingTimer.AutoReset = false; 
        loadingTimer.Start();
        try
        {
            allCategories = await _context.Categorierbqs.ToListAsync(); 
            if (allCategories != null && allCategories.Any())
            {
                licenceRBQFormModel.SousCategoSelected = allCategories.ToDictionary(c => c.CodeSousCategorie, c => false);
            }

            allProduitService = await _context.Produitservices.ToListAsync();
            if (allProduitService != null && allProduitService.Any())
            {
                produitServiceFormModel.SousProduitSelected = allProduitService.ToDictionary(c => c.CodeUnspsc, c => false);
            }
            categorieUNSPSC = await _context.Categorieunspscs.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        Components = new List<RenderFragment>
        {   
            // FORMULAIRE IDENTIFICATION 1
            builder =>
            {
                builder.OpenComponent<IdentificationForm>(0);
                builder.AddAttribute(1, "AssignReference", (Action<IdentificationForm>)(identificationForm => identificationRef = identificationForm));
                builder.AddAttribute(2, "IdenticationFormModel", identicationFormModel);
                builder.CloseComponent();
            },
            // FORMULAIRE COORDONNÉES 2
            builder =>
            {
                builder.OpenComponent<CoordonneeForm>(1);
                builder.AddAttribute(1, "AssignReference", (Action<CoordonneeForm>)(coordonneeForm => coordoneeRef = coordonneeForm));
                builder.AddAttribute(2, "CoordonneeFormModel", coordonneeFormModel);
                builder.CloseComponent();
            },
            // FORMULAIRE CONTACT 3
            builder =>
            {
                builder.OpenComponent<ContactFormHoster>(2);
                builder.AddAttribute(1, "AssignReference", (Action<ContactFormHoster>)(contactFormHoster =>  contactHosterRef = contactFormHoster));
                builder.AddAttribute(2, "ContactHosterFormModel", contactHosterFormModel);
                builder.CloseComponent();
            },
            // FORMULAIRE PRODUITS ET SERVICES 4
            builder =>
            {
                builder.OpenComponent<ProduitsServices>(3);
                builder.AddAttribute(1, "AssignReference", (Action<ProduitsServices>)(produitsServices => produitServiceRef = produitsServices));
                builder.AddAttribute(2, "AllProduitServices", allProduitService); 
                builder.AddAttribute(3, "ProduitServiceFormModel", produitServiceFormModel);
                builder.AddAttribute(4, "CategorieUNSPSC", categorieUNSPSC);
                builder.CloseComponent();
            },
            // FORMULAIRE LICENCE RBQ 5
            builder =>
            {
                builder.OpenComponent<LicenceRBQ>(4);
                builder.AddAttribute(1, "AssignReference", (Action<LicenceRBQ>)(licenceRBQ => licenceRBQRef = licenceRBQ));
                builder.AddAttribute(2, "AllCategories", allCategories); 
                builder.AddAttribute(3, "LicenceRBQFormModel", licenceRBQFormModel);
                builder.AddAttribute(4, "IsRBQAnyFieldChange", IsRBQAnyFieldChange);
                builder.AddAttribute(5, "IsRBQAnyFieldChangeChanged", EventCallback.Factory.Create<bool>(this, OnIsRBQAnyFieldChangeChanged));
                builder.CloseComponent();
            },
            // FORMULAIRE PIÈCES JOINTES 6
            builder =>
            {
                builder.OpenComponent<PiecesJointes>(5);
                builder.AddAttribute(1, "PieceJointeFormModel", pieceJointeFormModel);
                builder.CloseComponent();
            }
        };
        identificationRef = new IdentificationForm();
        coordoneeRef = new CoordonneeForm();
        contactHosterRef = new ContactFormHoster();
        produitServiceRef = new ProduitsServices();
        licenceRBQRef = new LicenceRBQ();
        isLoading = false;
        StopLoading();
    }

    private void OnLoadingTimerElapsed(object sender, ElapsedEventArgs e)
    {
        showMessage = true;
        InvokeAsync(StateHasChanged); 
    }

    private void OnIsRBQAnyFieldChangeChanged(bool newValue)
    {
        IsRBQAnyFieldChange = newValue;
    }

    private void StopLoading()
    {
        isLoading = false; 
        loadingTimer?.Stop(); 
        loadingTimer?.Dispose(); 
    }

    private async Task ShowNext()
    {
        StateHasChanged();
        // CASE IDENTIFICATION 1
        if (currentIndex == 0 && identificationRef != null)
        {
            bool isValid = identificationRef.TriggerValidation();
            if (!isValid)
            {
                return;
            }
            if (string.IsNullOrEmpty(identicationFormModel.NEQ)) 
            {
                licenceRBQFormModel.Disabled = true;
            }
            else 
            {
                licenceRBQFormModel.Disabled = false;
            }
        }

        // CASE COORDONNEE 2
        if (currentIndex == 1 && coordoneeRef != null)
        {
            bool isValid = coordoneeRef.TriggerValidation();
            if (!isValid)
            {
                return;
            }
        }

        // CASE CONTACT 3
        if (currentIndex == 2 && contactHosterRef != null)
        {
            bool isValid = contactHosterRef.TriggerValidation();
            if (!isValid)
            {
                return;
            }
        }

        // CASE PRODUITS ET SERVICES 4
        if (currentIndex == 3 && produitServiceRef != null)
        {
            bool isValid = produitServiceRef.TriggerValidation();
            if (!isValid)
            {
                return;
            }
        }

        // CASE LICENCE RBQ 5
        if (currentIndex == 4 && licenceRBQRef != null)
        {
            if (IsRBQAnyFieldChange)
            {
                bool isValid = await licenceRBQRef.TriggerValidation();
                if (!isValid)
                {
                    return;
                }
            }
        }

        // CASE PIÈCES JOINTES 6
        if (currentIndex == 5)
        {
            SaveDataToDB();
        }

        if (currentIndex < Components.Count - 1)
        {
            currentIndex++;
        }
    }

    private void ShowPrevious()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
        }
    }

    private async void SaveDataToDB()
    {
        await fournisseurService.SaveFournisseurData(produitServiceFormModel);
        await identificationService.SaveIdentificationData(identicationFormModel);
        await coordonneeService.SaveCoordonneeData(coordonneeFormModel);
        await contactsService.SaveContactsData(contactHosterFormModel);
        await produitServiceService.SaveProduitServiceData(produitServiceFormModel);
        await licenceRBQService.SaveLicenceRBQData(licenceRBQFormModel);
        await fichierService.SaveFichierData(pieceJointeFormModel, identicationFormModel);
        await historiqueService.AddHistoriqueEnAttente(-1);
        // IL RESTE PLUS QU'A LE REDIRIGER VERS SA FICHE FOURNISSEUR SUR SON PROPRE COMPTE OU VERS LOGIN
    }
}