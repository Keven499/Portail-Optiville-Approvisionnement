@page "/index"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Portail_OptiVille.Data.Exceptions
@using Portail_OptiVille.Data.Models
@using Portail_OptiVille.Data.Utilities
@using System.Text.RegularExpressions
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager navigationManager
@inject ICookie cookie
@inject JwtTokenGenerator tokenGenerator
@inject A2024420517riGr1Eq6Context _context

@inject ProtectedSessionStorage protectedSessionStorage
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="row d-flex justify-content-center">
        <div class="col-xl-11">
            <div class="card">
                <div class="card-header py-2 bg-vertFonce d-flex justify-content-between align-items-center">
                    <h3 class="text-white titre-bold m-0">Votre portail</h3>
                </div>
                <div class="card-body border-vertFonce">
                    <h1 class="titre-90bold m-0 vert text-center">Bienvenue</h1>
                    @* <p class="texte-40bold text-center"></p> *@
                </div>
                <div class="card-footer py-2 bg-vertFonce"></div>
            </div>
        </div>
    </div>
</div>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            // Récupération de l'email depuis la session protégée
            var result = await ProtectedSessionStore.GetAsync<string>("Email");

            if (!result.Success || string.IsNullOrEmpty(result.Value))
            {
                // Récupération du token depuis les cookies et extraction de l'email
                string token = await cookie.GetValue("SToken") ?? throw new UserNotAuthenticatedException("Session expirée ou non connectée.");
                string email = tokenGenerator.GetValueFromToken(token);

                // Vérification de la validité de l'email
                if (!Regex.IsMatch(email, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"))
                    throw new UserNotAuthenticatedException("Email non valide ou session expirée.");

                // Vérification de l'utilisateur et de la date d'expiration
                var user = _context.Usersessions.FirstOrDefault(u => u.OwnerEmail == email)
                           ?? throw new UserNotAuthenticatedException("Utilisateur non trouvé ou session expirée.");

                if (user.ExpirationDate <= DateTime.Now)
                    throw new UserNotAuthenticatedException("Session expirée.");

                // Mise à jour de la session protégée avec l'email valide
                await ProtectedSessionStore.SetAsync("Email", email);
            }

            Console.WriteLine($"Adresse courriel: {result.Value}");
        }
        catch (UserNotAuthenticatedException ex)
        {
            Console.WriteLine($"Erreur lors de la récupération de l'adresse courriel : {ex.Message}");
            navigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur inattendue : {ex.Message}");
            navigationManager.NavigateTo("/", true);
        }
    }
        private async Task Deconnexion()
    {
        Usersession[] usersessions;
        string email;

        var result = await protectedSessionStorage.GetAsync<string>("Email"); // Je vais chercher le mail dans le protectedSessionStorage

        email = result.Value;
        usersessions = _context.Usersessions.Where(u => u.OwnerEmail == email).ToArray();
        if(usersessions.Length > 0)
        {
            foreach (var usersession in usersessions)
            {
                _context.Usersessions.Remove(usersession);
            }
            await _context.SaveChangesAsync();    

            await protectedSessionStorage.DeleteAsync("Email");
            await cookie.destroy("SToken");
        }
        else
        {
            var token = await cookie.GetValue("SToken");
            if(!string.IsNullOrEmpty(token))
            {
                email = tokenGenerator.GetValueFromToken(token).Split(":")[0];
                usersessions = _context.Usersessions.Where(u => u.OwnerEmail == email).ToArray();
                foreach (var usersession in usersessions)
                {
                    _context.Usersessions.Remove(usersession);
                }
                await _context.SaveChangesAsync();
            }
            
            await protectedSessionStorage.DeleteAsync("Email");
            await cookie.destroy("SToken");
        } 


        // usersessions = _context.Usersessions.Where(u => u.OwnerEmail == email).ToArray();
        // foreach (var usersession in usersessions)
        // {
        //     _context.Usersessions.Remove(usersession);
        // }
        // await _context.SaveChangesAsync();
        
        NavigationManager.NavigateTo("/", true);
    }   

}
