@page "/listeSelection"
@using Data.Models
@using Microsoft.EntityFrameworkCore;
@inject NavigationManager Navigation
@inject A2024420517riGr1Eq6Context _context

<PageTitle>Liste des sélections</PageTitle>
<div class="d-flex justify-content-center">
    <div class="card col-xxl-8 col-xl-9 col-lg-10 col-sm-12 col-12" style="border: none;">
        <div class="card-header rounded-0 bg-vert card-header-borders py-0 px-0">
            <div class="row m-0">
                <div class="col-3 d-flex justify-content-center border-right">
                    <div class="text-white titre-bold fs-4">Entreprise</div>
                </div>
                <div class="col-3 d-flex justify-content-center border-right">
                    <div class="text-white titre-bold fs-4">Numéro de téléphone(s)</div>
                </div>
                <div class="col-3 d-flex justify-content-center border-right">
                    <div class="text-white titre-bold fs-4">Contact(s)</div>
                </div>
                <div class="col-3 d-flex justify-content-center">
                    <div class="text-white titre-bold fs-4">Contacté</div>
                </div>
            </div>
        </div>  
        <div style="max-height: 400px; cursor: default;" class="card-body border-vertFonce box-vert listFiltre p-0">
            <!-- LISTE DES FICHES -->
            @if (fournisseurFiches.Any())
            {
                int i = 0;
                @foreach (var fiche in fournisseurFiches)
                {
                    <div class="row m-0 list-row"
                         style="@(i == 0 ? "padding-top: 16px;" : "") @(i == fournisseurFiches.Count - 1 ? "padding-bottom: 16px;" : "")">
                        <!-- ENTREPRISE (NOM, ADRESSE COURRIEL) -->
                        <div class="col-3 d-flex justify-content-center align-items-center border-right" style="word-wrap: break-word; white-space: normal;">
                            <div class="row w-100 text-center">
                                <div class="col-12">
                                    <div class="mb-2">@fiche.NomEntreprise</div>
                                    <div>@fiche.AdresseCourriel</div>
                                </div>
                            </div>
                        </div>
                        <!-- NUMÉRO DE TÉLÉPHONES -->
                        <div class="col-3 d-flex justify-content-center align-items-center border-right" style="word-wrap: break-word; white-space: normal;">
                            @foreach (var telephone in fiche.NumTelephones)
                            {
                                <div class="row w-100 text-center">
                                    <div class="col-12">@telephone</div>
                                </div>
                            }
                        </div>
                        <!-- CONTACTS (NOM, PRÉNOM, ADRESSE COURRIEL, NUMÉRO DE TÉLÉPHONE) -->
                        <div class="col-3 d-flex justify-content-center align-items-center border-right" style="word-wrap: break-word; white-space: normal;">
                            <div class="row w-100 listFiltre" style="max-height: 150px;">
                            @{
                                int j = 0;
                                @foreach (var contact in fiche.Contacts)
                                {
                                    <div class="col-12">
                                        <div>@contact.Prenom - @contact.Nom</div>
                                        <div class="my-2">@contact.AdresseCourriel</div>
                                        <div>@contact.NumTelephone</div>
                                    </div>
                                    @if (!(j == fiche.Contacts.Count - 1))
                                    {
                                        <hr style="margin-top: 16px;"/>
                                    }
                                    j++;
                                }
                            }
                            </div>
                        </div>
                        <!-- CONTACTÉ -->
                        <div class="col-3 d-flex justify-content-center align-items-center">
                            <input type="checkbox" class="check-vert">
                        </div>
                    </div>
                    @if (!(i == fournisseurFiches.Count - 1))
                    {
                        <hr />
                    }
                    i++;
                }
            }
            else
            {
                <div class="text-center fw-bold py-2">NO DATA</div>
            }
        </div>
    </div>
</div>

<!-- CERTAINES CLASSES SONT UTILISÉES À LA FOIS DANS LA PAGE RECHERCHE ET CELLE-CI, IL FAUDRAIT LES RENDRE DISPONIBLE POUR LES DEUX PAGES POUR ÉVITER LA RÉPÉTITION -->
<style>
    .flex-line {
        flex-grow: 1;
        height: 1px;
        background: linear-gradient(to right, transparent, #b0b0b0, transparent);
        opacity: 0.6;
    }
    input[type="checkbox"].check-vert {
        position: relative;
    using Portail_OptiVille.Data.Models;
        cursor: pointer;
        appearance: none;
        background-color: rgb(99 188 85);
        border: 1px solid rgb(30 73 45);
        border-radius: 4px;
        transition: background-color 0.3s;
    }
    input[type="checkbox"].check-vert:checked {
        background-color: rgb(30 73 45);
    }
    .listFiltre {
        max-height: 250px;
        overflow-y: auto;
        overflow-x: hidden;
    }
    .card-header-borders {
        border-width: 2px 2px 0 2px; 
        border-style: solid; 
        border-color: rgb(30, 73, 45);
    }
    .placeholder-large::placeholder {
        font-size: 16px; 
        color: rgba(0, 0, 0, 0.5);
        font-style: italic;
    }
    .placeholder-small::placeholder {
        font-size: 14px; 
        color: rgba(0, 0, 0, 0.5);
        font-style: italic;
    }
    .border-right {
        border-right: 1px solid rgb(30, 73, 45);
    }
    .bg-yellowEtat {
        background-color: rgb(243 231 0);
    }
    .bg-redEtat {
        background-color: rgb(229 0 77);
    }
    .bg-grayEtat {
        background-color: gray;
    }
</style>

@code
{
    private List<int> selectedIds = new List<int>();
    private List<FournisseurFiche> fournisseurFiches = new List<FournisseurFiche>();
    private Dictionary<string, string> QueryParams = new();

    protected override async Task OnInitializedAsync()
    {
        var queryParams = Navigation.Uri.Split('?').Skip(1).FirstOrDefault();
        if (queryParams != null)
        {
            var queryDictionary = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(queryParams);
            foreach (var param in queryDictionary)
            {
                QueryParams[param.Key] = param.Value;
            }
        }
        for (int i = 1; ; i++)
        {
            var key = $"id{i}";
            if (QueryParams.ContainsKey(key))
            {
                selectedIds.Add(int.Parse(QueryParams[key]));
            }
            else
            {
                break;  
            }
        }
        fournisseurFiches = await (from f in _context.Fournisseurs
                                       join i in _context.Identifications on f.IdFournisseur equals i.Fournisseur
                                       join c in _context.Coordonnees on f.IdFournisseur equals c.Fournisseur
                                       where selectedIds.Contains(f.IdFournisseur)
                                       select new FournisseurFiche
                                       {
                                            NomEntreprise = i.NomEntreprise,
                                            AdresseCourriel = i.AdresseCourriel,
                                            NumTelephones = _context.Telephones
                                                .Where(t => t.Coordonnee == c.IdCoordonnee && t.NumTelephone != null)
                                                .Select(t => t.NumTelephone!)
                                                .ToList(),
                                            Contacts = (from contact in _context.Contacts
                                                        join tel in _context.Telephones on contact.IdContact equals tel.Contact
                                                        where contact.Fournisseur == f.IdFournisseur
                                                        select new ContactFiche
                                                        {
                                                            Nom = contact.Nom,
                                                            Prenom = contact.Prenom,
                                                            AdresseCourriel = contact.AdresseCourriel,
                                                            NumTelephone = tel.NumTelephone
                                                        }).ToList()
                                       })
                               .AsSplitQuery()
                               .ToListAsync();
        Console.WriteLine(fournisseurFiches.Count);
    }

    public class FournisseurFiche
    {
        public string ?NomEntreprise { get; set; }
        public string ?AdresseCourriel { get; set; }
        public List<string> NumTelephones { get; set; }
        public List<ContactFiche> Contacts { get; set; }
    }

    // STRUCTURE DE L'OBJET POUR CONTACT
    public class ContactFiche
    {
        public string ?Nom { get; set; }
        public string ?Prenom { get; set; }
        public string ?AdresseCourriel { get; set; }
        public string ?NumTelephone { get; set; }
    }
}