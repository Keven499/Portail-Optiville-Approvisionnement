@page "/recherche"
@using Data.Models
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Attributes
@inject A2024420517riGr1Eq6Context _context
@inject ListeVillesAPI listeVillesAPI
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.ComponentModel.DataAnnotations

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Portail_OptiVille.Data.Utilities
@inject ProtectedSessionStorage protectedSessionStorage
@inject NavigationManager NavigationManager
@inject ICookie cookie
@inject A2024420517riGr1Eq6Context _context
@inject JwtTokenGenerator tokenGenerator

<PageTitle>Recherche</PageTitle>
@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 80vh; position: relative;">
        <div class="spinner-border text-success me-2" role="status"></div>
        <div class="d-flex flex-column">
            <span class="titre-medium fs-3">Chargement en cours..</span>
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="col-xxl-11 col-xl-11 col-lg-11 col-sm-12 col-12">
            <div class="card">
                <div style="border: none;" class="card-header py-2 bg-vertFonce">
                    <h3 class="py-2 p-0 my-0 text-white titre-bold">Recherche</h3>
                </div>
                <div class="card-body border-vertFonce pb-1">
                    <div class="row">
                        <div class="col-12">
                            <div class="input-group">
                                <input type="text" placeholder="Recherchez" class="form-control input-vert texte-light placeholder-large" @bind="searchBarValue" />
                                <button class="btn bg-vert text-white input-vert no-focus-white-thick-border" id="btnVert" type="button" @onclick="OnSearch">
                                    <i class="bi bi-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <!-- FILTRE NE S'APPLIQUANT QU'AU RESPONSABLE -->
                    <div class="row border-vertFonce box-vert my-2 m-0">
                    @{
                        int p = 0;
                        @foreach (var checkBox in cbxDicState)
                        {
                            <div class="col-6 my-1 d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center justify-content-between">
                                    @switch (p)
                                    {
                                        case 0: <i class="bi bi-check-circle me-2"></i>
                                            break;
                                        case 1: <i class="bi bi-exclamation-circle me-2"></i>
                                            break;
                                        case 2: <i class="bi bi-x-circle me-2"></i>
                                            break;
                                        case 3:  <i class="bi bi-dash-circle me-2"></i>
                                            break;
                                    }
                                    <label class="texte-13medium vertFonce" for="state@(p)">@checkBox.Key</label>
                                </div>
                                <span class="flex-line mx-2"></span>
                                <div class="d-flex align-items-center justify-content-end">
                                    <input type="checkbox" id="state@(p)" class="check-vert" 
                                        @onchange="(e) => OnCheckboxChangeState(checkBox.Key, e)" />
                                </div>
                            </div>
                            p++;
                        } 
                    }
                    </div>
                <div class="row my-2">
                    <div class="col-6 pe-1">
                        <div class="card" style="border: none;">
                            <div style="border-bottom: 2px; border-style: solid;" class="card-header bg-vert card-header-borders py-1 px-3">
                                <div class="text-white titre-bold fs-5">Produits et services</div>
                            </div>
                        </div>
                        <div style="border-width: 0 2px 0 2px; border-style: solid; border-color: rgb(30, 73, 45);" class="input-group">
                            <input type="text" placeholder="Recherchez" style="height: 30px;" class="form-control input-vert-no-border texte-light rounded-0 placeholder-small" @bind="searchBarValueProduct" />
                            <button style="height: 30px;" class="btn bg-vert text-white input-vert-no-border rounded-0 d-flex align-items-center no-focus-white-light-border" id="btnVert" type="button" @onclick="OnSearchProduct">
                                <i class="bi bi-search" style="font-size: 12px;"></i>
                            </button>
                        </div>
                        <div style="max-height: 220px;" class="card-body border-vertFonce box-vert listFiltre p-1">
                            <!-- LISTER LES PRODUITS ET SERVICES -->
                            <div class="row">
                                @{
                                    int b = 0;
                                    foreach (var produit in produitsServiceInternal)
                                    {
                                        bool isLast = (b == produitsServiceInternal.Count - 1);
                                        <div style="margin-bottom: @(isLast ? "0" : "5px");" class="col-12">
                                            <label class="d-flex align-content-center">
                                                <input type="checkbox" id="categorie@(b)" class="check-vert me-2"
                                                    @onchange="(e) => OnCheckboxChangeProductService(produit.CodeUnspsc, e)" />
                                                <div style="font-size: 14px;" class="d-flex texte-light fw-bold">
                                                    <div class="me-1">@produit.CodeUnspsc</div>
                                                    <div>@produit.Description</div>
                                                </div>
                                            </label>
                                        </div>
                                        b++;
                                    }
                                }
                            </div>
                        </div>
                    </div>
                        <div class="col-6 ps-1">
                            <div class="card" style="border: none;">
                                <div class="card-header bg-vert card-header-borders py-1 px-3">
                                    <div class="text-white titre-bold fs-5">Catégories</div>
                                </div>
                            </div>
                            <div class="card-body border-vertFonce box-vert listFiltre p-1">
                                <!-- LISTER LES CATÉGORIES -->
                                <div class="row">
                                    <div class="col-12 text-center">
                                        <label class="titre-medium fs-4">Entrepeneur général</label>
                                    </div>
                                    @{
                                        int i = 0;
                                        categorieRBQGeneral = categoriesRBQ
                                        .Where(c => c.NomCategorie == "Général")
                                        .ToList();
                                        foreach (var categorie in categorieRBQGeneral)
                                        {
                                            bool isLast = (i == categorieRBQGeneral.Count - 1);
                                            <div style="margin-bottom: @(isLast ? "0" : "5px");" class="col-12">
                                                <label class="d-flex align-content-center">
                                                    <input type="checkbox" id="categorie@(i)" class="check-vert me-2"
                                                        @onchange="(e) => OnCheckboxChangeRBQ(categorie.CodeSousCategorie, e)" />
                                                    <div style="font-size: 14px;" class="d-flex texte-light fw-bold">
                                                        <div class="me-1">@categorie.CodeSousCategorie</div>
                                                        <div>@categorie.TravauxPermis</div>
                                                    </div>
                                                </label>
                                            </div>
                                            i++;
                                        }
                                    } 
                                </div>
                                <div class="row">
                                    <div class="col-12 text-center">
                                        <label class="titre-medium fs-4">Entrepeneur spécialisé</label>
                                    </div>
                                    @{
                                        int j = 0;
                                        categorieRBQSpecialise = categoriesRBQ
                                        .Where(c => c.NomCategorie == "Spécialisé")
                                        .ToList();
                                        foreach (var categorie in categorieRBQSpecialise)
                                        {
                                            bool isLast = (j == categorieRBQSpecialise.Count - 1);
                                            <div style="margin-bottom: @(isLast ? "0" : "5px");" class="col-12">
                                                <label class="d-flex align-content-center">
                                                    <input type="checkbox" id="categorie@(j)" class="check-vert me-2"
                                                        @onchange="(e) => OnCheckboxChangeRBQ(categorie.CodeSousCategorie, e)" />
                                                    <div style="font-size: 14px;" class="d-flex texte-light fw-bold">
                                                        <div class="me-1">@categorie.CodeSousCategorie</div>
                                                        <div>@categorie.TravauxPermis</div>
                                                    </div>
                                                </label>
                                            </div>
                                            j++;
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row my-2">
                        <div class="col-6 pe-1">
                            <div class="card" style="border: none;">
                                <div class="card-header card-header-borders bg-vert py-1 px-3">
                                    <div class="text-white titre-bold fs-5">Région administratives</div>
                                </div>
                            </div>
                            <div class="card-body border-vertFonce box-vert listFiltre p-1">
                                <!-- LISTER LES RÉGIONS ADMINISTRATIVES -->
                                <div class="row">
                                    <div class="col-12">
                                    @{
                                        i = 0;
                                        foreach (var region in regionsAdmini2D)
                                        {
                                            bool isLast = (i == regionsAdmini2D.Count - 1);
                                            <div style="margin-bottom: @(isLast ? "0" : "5px");" class="col-12">
                                                <label class="d-flex align-content-center">
                                                    <input type="checkbox" id="categorie@(i)" class="check-vert me-2"
                                                        @onchange="(e) => OnCheckboxChangeRegionAdmini(region[1], e)"/>
                                                    <div style="font-size: 14px;" class="d-flex texte-light fw-bold">
                                                        @for (int c = 0; c < region.Count; c++)
                                                        {
                                                            <div class="@(c == 1 ? "" : "me-1")">@region[c]</div>
                                                        }
                                                    </div>
                                                </label>
                                            </div>
                                            i++;
                                        }
                                    }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6 ps-1">
                            <div class="card" style="border: none;">
                                <div class="card-header card-header-borders bg-vert py-1 px-3">
                                    <div class="text-white titre-bold fs-5">Villes</div>
                                </div>
                            </div>
                            <div class="card-body border-vertFonce box-vert listFiltre p-1">
                                <!-- LISTER LES VILLES -->
                                <!-- 
                                    LA LISTE DES VILLES SE RETROUVE SUR L'API:
                                    https://www.donneesquebec.ca/recherche/dataset/repertoire-des-municipalites-du-quebec/resource/19385b4e-5503-4330-9e59-f998f5918363
                                    LES VILLES ONT POUR CHAMP: munnom (municipalité nom)
                                -->
                                <div class="row">
                                    <div class="col-12">
                                    @{
                                        i = 0;
                                        foreach (var city in cities)
                                        {
                                            bool isLast = (i == cities.Count - 1);
                                            <div style="margin-bottom: @(isLast ? "0" : "5px");" class="col-12">
                                                <label class="d-flex align-content-center">
                                                    <input type="checkbox" id="categorie@(j)" class="check-vert me-2"
                                                        @onchange="(e) => OnCheckboxChangeVille(city, e)" />
                                                    <div style="font-size: 14px;" class="d-flex texte-light fw-bold">@city</div>
                                                </label>
                                            </div>
                                            i++;
                                        }
                                    }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row my-2">
                        <div class="col-12">
                            <div class="card" style="border: none;">
                                <div class="card-header bg-vert card-header-borders py-0 px-0">
                                    <div class="row m-0">
                                        <div class="col-3 d-flex justify-content-center border-right">
                                            <div class="text-white titre-bold fs-5">Statut</div>
                                        </div>
                                        <div class="col-3 d-flex justify-content-center border-right">
                                            <div class="text-white titre-bold fs-5">Fournisseur</div>
                                        </div>
                                        <div class="col-3 d-flex justify-content-center border-right">
                                            <div class="text-white titre-bold fs-5">Ville</div>
                                        </div>
                                        <div class="col-3 d-flex justify-content-center">
                                            <div class="text-white titre-bold fs-5">Fiche</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="max-height: 400px; cursor: default;" class="card-body border-vertFonce box-vert listFiltre p-0">
                                <!-- LISTE DES FICHES -->
                                @{
                                    if (copieFournisseurFiches.Any())
                                    {
                                        foreach (var fiche in copieFournisseurFiches)
                                        {
                                            <div style="height: 35px;" class="row m-0 list-row" onclick="toggleRowSelection(this)">
                                                <!-- STATUS -->
                                                <div class="col-3 d-flex justify-content-center align-items-center border-right">
                                                    <div class="w-100 text-center
                                                        @(fiche.EtatDemande == "En attente" ? "bg-yellowEtat texte-medium" :
                                                        fiche.EtatDemande == "Accepté" ? "bg-vert text-white texte-medium" :
                                                        fiche.EtatDemande == "Refusé" ? "bg-redEtat text-white texte-medium" : 
                                                        fiche.EtatDemande == "À réviser" ? "bg-grayEtat text-white texte-medium" : "")">
                                                        @fiche.EtatDemande
                                                    </div>
                                                </div>
                                                <!-- NOM ENTREPRISE -->
                                                <div class="col-3 d-flex justify-content-center align-items-center border-right">
                                                    <div style="font-size: 14px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" class="d-flex texte-light fw-bold">@fiche.NomEntreprise</div>
                                                </div>
                                                <!-- VILLE -->
                                                <div class="col-3 d-flex justify-content-center align-items-center border-right">
                                                    <div style="font-size: 14px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" class="d-flex texte-light fw-bold">@fiche.Ville</div>
                                                </div>
                                                <div class="col-3 d-flex justify-content-center align-items-center">
                                                    <button type="button"
                                                            style="font-size: 14px; height: 30px;"
                                                            class="btn bg-vert d-flex align-items-center texte-light fw-bold text-white"
                                                            id="btnVert"
                                                            @onclick="() => NavigateToTargetPage(fiche.IdFournisseur)">
                                                        Fiche
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="text-center fw-bold py-2">NO DATA</div>    
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-vertFonce d-flex justify-content-center">
                    <button class="btn bg-vert text-white texte-medium d-flex justify-content-evenly" id="btnVert" style="width: 200px;"
                        @onclick="OpenSelection">
                        <i class="bi bi-arrow-up-right-circle"></i>
                        <div>Ouvrir les sélections</div>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    let flashingRows = [];  // Array to store selected row indices
    
    function toggleRowSelection(element) {
        const rowIndex = Array.from(element.parentElement.children).indexOf(element);  // Get the index of the selected row
        const isSelected = flashingRows.includes(rowIndex);
        const isLastRow = !element.nextElementSibling;

        if (isSelected) {
            // Remove the index from the selected array
            flashingRows = flashingRows.filter(index => index !== rowIndex);
            element.classList.remove("selected-row");
            element.classList.remove("has-bottom-border");
            const previousRow = element.previousElementSibling;
            if (previousRow) {
                if (!flashingRows.includes(Array.from(previousRow.parentElement.children).indexOf(previousRow))) {
                    previousRow.classList.remove("has-bottom-border");
                }
            }
        } else {
            // Add the index to the selected array
            flashingRows.push(rowIndex);
            element.classList.add("selected-row");
            if (!isLastRow) {
                element.classList.add("has-bottom-border");
            }
            const previousRow = element.previousElementSibling;
            if (previousRow && !flashingRows.includes(Array.from(previousRow.parentElement.children).indexOf(previousRow))) {
                previousRow.classList.add("has-bottom-border");
            }
        }
    }

    // Function to return the selected row indices
    function getSelectedIndices() {
        return flashingRows;
    }
</script>

@code 
{
    private bool isLoading = true;
    private string? searchBarValue;
    private string? searchBarValueProduct;
    private List<Categorierbq> categoriesRBQ = new List<Categorierbq>();
    private List<Categorierbq> categorieRBQGeneral = new List<Categorierbq>();
    private List<Categorierbq> categorieRBQSpecialise = new List<Categorierbq>();
    private List<Produitservice> produitsService = new List<Produitservice>();
    private List<Produitservice> produitsServiceInternal = new List<Produitservice>();
    private List<string> cities = new List<string>();
    private List<FournisseurFiche> fournisseurFiches;
    private List<FournisseurFiche> copieFournisseurFiches;
    private Dictionary<string, bool> cbxDicCategoriesRBQ;
    private Dictionary<string, bool> cbxDicProductService;
    private Dictionary<string, bool> cbxDicVilles;
    private Dictionary<string, bool> cbxDicRegionsAdmini;
    private Dictionary<string, bool> cbxDicState = new Dictionary<string, bool>
    {
        { "Accepté", false },
        { "À réviser", false },
        { "Refusé", false },
        { "En attente", false }
    };
    List<List<string>> regionsAdmini2D = new List<List<string>>
    {
        new List<string> { "(01)", "Bas-Saint-Laurent" },
        new List<string> { "(02)", "Saguenay-Lac-Saint-Jean" },
        new List<string> { "(03)", "Capitale-Nationale" },
        new List<string> { "(04)", "Mauricie" },
        new List<string> { "(05)", "Estrie" },
        new List<string> { "(06)", "Montréal" },
        new List<string> { "(07)", "Outaouais" },
        new List<string> { "(08)", "Abitibi-Témiscamingue" },
        new List<string> { "(09)", "Côte-Nord" },
        new List<string> { "(10)", "Nord-du-Québec" },
        new List<string> { "(11)", "Gaspésie-Îles-de-la-Madeleine" },
        new List<string> { "(12)", "Chaudière-Appalaches" },
        new List<string> { "(13)", "Laval" },
        new List<string> { "(14)", "Lanaudière" },
        new List<string> { "(15)", "Laurentides" },
        new List<string> { "(16)", "Montérégie" },
        new List<string> { "(17)", "Centre-du-Québec" }
    };
    string? ville = null;
    string? regionAdministrative = null;
    string? codeUNSPSC = null;
    string? codeSousCategorie = null;
    string? stateString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categoriesRBQ = await _context.Categorierbqs.ToListAsync();
            cbxDicCategoriesRBQ = categoriesRBQ.ToDictionary(c => c.CodeSousCategorie, c => false);
            cities = await listeVillesAPI.GetVilles();
            cbxDicVilles = cities.ToDictionary(city => city, city => false);
            cbxDicRegionsAdmini = regionsAdmini2D.ToDictionary(region => region[1], region => false);
            // TEST AVEC SEULEMENT 500 LIGNES
            produitsService = await _context.Produitservices.Take(500).ToListAsync();
            cbxDicProductService = produitsService.ToDictionary(c => c.CodeUnspsc, c => false);
            produitsServiceInternal = produitsService;
            
            fournisseurFiches = await _context.Fournisseurs
                .Where(f => f.Historiques.Any(h => h.EtatDemande != "Modifiée"))
                .Select(f => new FournisseurFiche
                {
                    IdFournisseur = f.IdFournisseur,
                    // Utilisation d'un seul OrderByDescending
                    EtatDemande = f.Historiques
                        .Where(h => h.EtatDemande != "Modifiée")
                        .OrderByDescending(h => h.DateEtatChanged)
                        .FirstOrDefault().EtatDemande,
                    NomEntreprise = f.Identifications.FirstOrDefault().NomEntreprise,
                    Ville = f.Coordonnees.FirstOrDefault().Ville,
                    // Réutilisation du premier élément trié
                    DateEtatChanged = f.Historiques
                        .Where(h => h.EtatDemande != "Désactivée" && h.EtatDemande != "Modifiée")
                        .OrderByDescending(h => h.DateEtatChanged)
                        .FirstOrDefault().DateEtatChanged
                })
                .ToListAsync();

                fournisseurFiches.RemoveAll(f => f.EtatDemande == "Désactivée");

            copieFournisseurFiches = new List<FournisseurFiche>(fournisseurFiches); 
            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"A problem occurred while retrieving data: {ex.Message}");
        }
    }

    private void OnSearchProduct()
    {
        if (string.IsNullOrEmpty(searchBarValueProduct) && produitsServiceInternal.Count != 500)
        {
            produitsServiceInternal = produitsService;
        }
        else
        {
            if (!string.IsNullOrEmpty(searchBarValueProduct) && char.IsDigit(searchBarValueProduct[0]))
            {
                produitsServiceInternal = produitsService
                        .Where(c => c.CodeUnspsc != null && c.CodeUnspsc.Contains(searchBarValueProduct, StringComparison.OrdinalIgnoreCase))
                        .ToList();
            }
            else
            {
                if (!string.IsNullOrEmpty(searchBarValueProduct))
                {
                    produitsServiceInternal = produitsService
                        .Where(c => c.Description != null && c.Description.Contains(searchBarValueProduct, StringComparison.OrdinalIgnoreCase))
                        .ToList();
                }
            }
        }
    }

    private void OnSearch()
    {
        if (string.IsNullOrEmpty(searchBarValueProduct) && produitsServiceInternal.Count != 500)
        {
            copieFournisseurFiches = fournisseurFiches;
        }
        else
        {
            copieFournisseurFiches = fournisseurFiches
                .Where(f => string.IsNullOrEmpty(searchBarValue) || f.NomEntreprise.Contains(searchBarValue, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async void FiltrageQuery()
    {
        ville = cbxDicVilles.Any(kv => kv.Value) 
            ? string.Join(",", cbxDicVilles.Where(kv => kv.Value).Select(kv => kv.Key)) 
            : null;
        regionAdministrative = cbxDicRegionsAdmini.Any(kv => kv.Value) 
            ? string.Join(",", cbxDicRegionsAdmini.Where(kv => kv.Value).Select(kv => kv.Key)) 
            : null;
        codeUNSPSC = cbxDicProductService.Any(kv => kv.Value) 
            ? string.Join(",", cbxDicProductService.Where(kv => kv.Value).Select(kv => kv.Key)) 
            : null;
        codeSousCategorie = cbxDicCategoriesRBQ.Any(kv => kv.Value) 
            ? string.Join(",", cbxDicCategoriesRBQ.Where(kv => kv.Value).Select(kv => kv.Key)) 
            : null;
        stateString = cbxDicState.Any(kv => kv.Value) 
            ? string.Join(",", cbxDicState.Where(kv => kv.Value).Select(kv => kv.Key)) 
            : null;
        var fournisseurIdList = await _context.Database
        .SqlQueryRaw<int>(@"
            SELECT DISTINCT f.idFournisseur
            FROM Fournisseur f
            LEFT JOIN Coordonnee c ON f.idFournisseur = c.fournisseur
            LEFT JOIN FournisseurProduitService fps ON f.idFournisseur = fps.idFournisseur
            LEFT JOIN ProduitService ps ON fps.idProduitService = ps.codeUNSPSC
            LEFT JOIN FournisseurLicenceRBQ flrbq ON f.idFournisseur = (SELECT fournisseur FROM LicenceRBQ WHERE idLicenceRBQ = flrbq.idLicenceRBQ)
            LEFT JOIN CategorieRBQ crbq ON flrbq.idCategorieRBQ = crbq.codeSousCategorie
            LEFT JOIN Historique h ON f.idFournisseur = h.fournisseur
            WHERE
                (FIND_IN_SET(c.ville, {0}) > 0 OR {0} IS NULL)
                AND (FIND_IN_SET(c.regionAdministrative, {1}) > 0 OR {1} IS NULL)
                AND (FIND_IN_SET(ps.codeUNSPSC, {2}) > 0 OR {2} IS NULL)
                AND (FIND_IN_SET(crbq.codeSousCategorie, {3}) > 0 OR {3} IS NULL)
                AND EXISTS (
                    SELECT 1
                    FROM Historique h2
                    WHERE h2.fournisseur = f.idFournisseur
                    AND h2.EtatDemande NOT IN ('Désactivée', 'Modifiée')
                    ORDER BY h2.DateEtatChanged DESC
                    LIMIT 1
                ) AND FIND_IN_SET(
                    (SELECT h2.EtatDemande
                    FROM Historique h2
                    WHERE h2.fournisseur = f.idFournisseur
                    AND h2.EtatDemande NOT IN ('Désactivée', 'Modifiée')
                    ORDER BY h2.DateEtatChanged DESC
                    LIMIT 1), {4}) > 0
                OR {4} IS NULL
        ", ville, regionAdministrative, codeUNSPSC, codeSousCategorie, stateString)
        .ToListAsync();
        var fournisseurIdSet = new HashSet<string>(fournisseurIdList.Select(id => id.ToString()));
        copieFournisseurFiches = fournisseurFiches
            .Where(fiche => fournisseurIdSet.Contains(fiche.IdFournisseur.ToString()))
            .ToList();
        StateHasChanged();
    }

    private void OnCheckboxChangeState(string stateValue, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            cbxDicState[stateValue] = (bool)e.Value;
        }
        FiltrageQuery();
    } 

    private void OnCheckboxChangeRBQ(string codeSousCategorie, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            cbxDicCategoriesRBQ[codeSousCategorie] = (bool)e.Value;
        }
        FiltrageQuery();
    } 

    private void OnCheckboxChangeVille(string ville, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            cbxDicVilles[ville] = (bool)e.Value;
        }
        FiltrageQuery();
    }

    private void OnCheckboxChangeRegionAdmini(string regionAdmini, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            cbxDicRegionsAdmini[regionAdmini] = (bool)e.Value;
        }
        FiltrageQuery();
    }

    private void OnCheckboxChangeProductService(string productService, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            cbxDicProductService[productService] = (bool)e.Value;
        }
        FiltrageQuery();
    } 


    private async Task OpenSelection() {
        var selectedIndices = await JS.InvokeAsync<int[]>("getSelectedIndices");
        var selectedIds = selectedIndices.Select(index => copieFournisseurFiches[index].IdFournisseur).ToList();
        var queryString = string.Join("&", selectedIds.Select((id, index) => $"id{index + 1}={id}"));
        Console.WriteLine($"Generated Query String: {queryString}");
        Navigation.NavigateTo($"/listeSelection?{queryString}");
    }

    private void NavigateToTargetPage(int fournisseurID)
    {
        Navigation.NavigateTo($"/affichage/{fournisseurID}");
    }

    public class FournisseurFiche
    {
        public int IdFournisseur { get; set; } 
        public string EtatDemande { get; set; }
        public string NomEntreprise { get; set; }
        public string Ville { get; set; }
        public DateTime? DateEtatChanged { get; set; } // Nouveau champ
    }

    private async Task Deconnexion()
    {
        Usersession[] usersessions;
        string email;

        var result = await protectedSessionStorage.GetAsync<string>("Email"); // Je vais chercher le mail dans le protectedSessionStorage

        email = result.Value;
        usersessions = _context.Usersessions.Where(u => u.OwnerEmail == email).ToArray();
        if(usersessions.Length > 0)
        {
            foreach (var usersession in usersessions)
            {
                _context.Usersessions.Remove(usersession);
            }
            await _context.SaveChangesAsync();    

            await protectedSessionStorage.DeleteAsync("Email");
            await cookie.destroy("SToken");
        }
        else
        {
            var token = await cookie.GetValue("SToken");
            if(!string.IsNullOrEmpty(token))
            {
                email = tokenGenerator.GetValueFromToken(token).Split(":")[0];
                usersessions = _context.Usersessions.Where(u => u.OwnerEmail == email).ToArray();
                foreach (var usersession in usersessions)
                {
                    _context.Usersessions.Remove(usersession);
                }
                await _context.SaveChangesAsync();
            }
            
            await protectedSessionStorage.DeleteAsync("Email");
            await cookie.destroy("SToken");
        } 


        // usersessions = _context.Usersessions.Where(u => u.OwnerEmail == email).ToArray();
        // foreach (var usersession in usersessions)
        // {
        //     _context.Usersessions.Remove(usersession);
        // }
        // await _context.SaveChangesAsync();
        
        NavigationManager.NavigateTo("/", true);
    }
}





