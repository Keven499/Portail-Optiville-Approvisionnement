@page "/historiqueFiche"
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@using System.Text.Json
@inject A2024420517riGr1Eq6Context _context

@*
    HISTORIQUE
*@

<PageTitle>Historique de {fournisseur}</PageTitle>
<div class="container-fluid">
    <div class="card">
        <div class="card-header bg-vert d-flex justify-content-center">
            <div class="fw-bold fs-4 text-white">Historique</div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-12">
                @*  NOUS SOMMES EN TRAIN D'IMPLÉMENTER HISTORIQUE DANS LA BASE DE DONNÉES, DÈS QUE CELA SERA TERMINÉ, NOUS VIENDRONS ICI POUR GÉRER L'AFFICHAGE,
                    CAR POUR L'INSTANT TRÈS RUSTIQUE ET SEMI HARDCODÉ. TRÈS NUL ET À AMÉLIORER *@
                @if (informationToShow != null)
                {
                    <div class="card mb-2">
                        <div class="card-header text-center">
                            <div class="fs-5 fw-bold">@(informationToShow.Retirer.ContainsKey("Section") ? @informationToShow.Retirer["Section"] : null)</div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-6">
                                @{
                                    if (informationToShow.Retirer.ContainsValue("Fichier"))
                                    {
                                        <div class="fw-bold">Nom: </div>               
                                    } 
                                    foreach (var kvp in informationToShow.Retirer)
                                    {
                                        if (!informationToShow.Retirer.ContainsValue("Fichier") 
                                        && !kvp.Value.Equals("Licence RBQ") 
                                        && !kvp.Value.Equals("Produits et services")
                                        && !kvp.Value.Equals("Contacts"))
                                        {
                                            <div class="fw-bold">@kvp.Key</div>               
                                        }
                                        if (!kvp.Key.Equals("Section"))
                                        {
                                            if (kvp.Key.Equals("Catégories") || kvp.Key.Equals("Produits et services")
                                            || kvp.Key.Equals("Nom") || kvp.Key.Equals("Prénom") || kvp.Key.Equals("Fonction")
                                            || kvp.Key.Equals("Type de numéro") || kvp.Key.Equals("Adresse courriel") || kvp.Key.Equals("Numéro de téléphone"))
                                            {
                                                var categories = kvp.Value.Split(':');  // Split by comma
                                                foreach (var category in categories)
                                                {
                                                    <div>
                                                        <i class="bi bi-dash"></i> @category.Trim()
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <div>
                                                    <i class="bi bi-dash"></i> @kvp.Value
                                                </div>
                                            }
                                        }
                                    }
                                }
                                </div>
                                <div class="col-6">
                                @{
                                    if (informationToShow.Ajouter.ContainsValue("Fichier"))
                                    {
                                        <div class="fw-bold">Nom: </div>               
                                    } 
                                    foreach (var kvp in informationToShow.Ajouter)
                                    {
                                        if (!informationToShow.Ajouter.ContainsValue("Fichier") 
                                        && !kvp.Value.Equals("Licence RBQ")
                                        && !kvp.Value.Equals("Produits et services"))
                                        {
                                            <div class="fw-bold">@kvp.Key</div>               
                                        }
                                        if (!kvp.Key.Equals("Section"))
                                        {
                                            if (kvp.Key.Equals("Catégories") || kvp.Key.Equals("Produits et services")
                                            || kvp.Key.Equals("Nom") || kvp.Key.Equals("Prénom") || kvp.Key.Equals("Fonction")
                                            || kvp.Key.Equals("Type de numéro") || kvp.Key.Equals("Adresse courriel") || kvp.Key.Equals("Numéro de téléphone"))
                                            {
                                                var categories = kvp.Value.Split(':');

                                                foreach (var category in categories)
                                                {
                                                    <div>
                                                        <i class="bi bi-plus"></i> @category.Trim()
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <div>
                                                    <i class="bi bi-plus"></i> @kvp.Value
                                                </div>
                                            }
                                        }
                                    }
                                }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                </div>
            </div>
            <div class="row">
                <div class="col-4">Date et heure</div>
                <div class="col-4">État de la demande</div>
                <div class="col-4">Modifié par</div>
            </div>
            @foreach (var historiqueChange in historiqueFiche)
            {
                <div class="row my-1">
                    <div class="col-4">@historiqueChange.DateEtatChanged</div>
                    <div class="col-4">
                        @* COULEUR TEMPORAIRE *@
                        <button type="button"
                            style="font-size: 14px; height: 30px;"
                            class="btn bg-vert d-flex align-items-center texte-light fw-bold text-white
                            @(historiqueChange.EtatDemande == "Accepté" ? "bg-Accepte texte-medium" :
                            historiqueChange.EtatDemande == "Refusé" ? "bg-Refuse text-white texte-medium" :
                            historiqueChange.EtatDemande == "En attente" ? "bg-EnAttente text-white texte-medium" : 
                            historiqueChange.EtatDemande == "À réviser" ? "bg-Reviser text-white texte-medium" :
                            historiqueChange.EtatDemande == "Désactivée" ? "bg-Desactive text-white texte-medium" :
                            historiqueChange.EtatDemande == "Modifiée" ? "bg-Modifie text-white texte-medium" : "")"
                            id="btnVert"
                            @onclick="() => ShowInformationState(historiqueChange.IdHistorique, historiqueChange.EtatDemande)">
                            @* ATTENTION, LES DONNÉES DE LA BD POUR LE ENUM NE REFLÈTENT PLUS LE CODE *@
                            @* NE PAS OUBLIER DE CHANGER LES COULEURS *@
                            @switch (historiqueChange.EtatDemande)
                            {
                                case "Accepté": <i class="bi bi-check-circle me-2"></i>
                                    break;
                                case "Refusé": <i class="bi bi-x-circle me-2"></i>
                                    break;
                                case "En attente": <i class="bi bi-dash-circle me-2"></i>
                                    break;
                                case "À réviser": <i class="bi bi-exclamation-circle me-2"></i>  
                                    break;
                                case "Modifiée": <i class="bi bi-pencil me-2"></i>
                                    break;
                                case "Désactivée": <i class="bi bi-slash-circle me-2"></i>     
                                    break;
                            }    
                            @historiqueChange.EtatDemande                 
                        </button>
                    </div>    
                    <div class="col-4">@historiqueChange.ModifiePar</div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .bg-EnAttente {
        background-color: rgba(217, 167, 0, 0.78);
    }
    .bg-Refuse {
        background-color: red;
    }
    .bg-Accepte {
        background-color: green;
    }
    .bg-Modifie {
        background-color: rgb(21, 21, 178);
    }
    .bg-Reviser {
        background-color: rgba(217, 167, 0, 0.78);
    }
    .bg-Desactive {
        background-color: purple;
    }
</style>

@code{
    @* [Parame  ter]
    public int idFournisseur { get; set; } = 63; *@
    private int idFournisseur = 74;
    private List<Historique> historiqueFiche = new List<Historique>();
    private InformationToShowDTO informationToShow;

    protected override async Task OnInitializedAsync()
    {
        historiqueFiche = await _context.Historiques
                                        .Where(h => h.Fournisseur == idFournisseur)
                                        .ToListAsync();
    }

    private async Task ShowInformationState(int idHistorique, string etatDemande)
    {
        if (etatDemande.Equals("Modifiée"))
            FetchModifiedData(idHistorique);
      
        else if (etatDemande.Equals("Refusé"))
            await FecthRefusedData();
    }

    private void FetchModifiedData(int historiqueId)
    {
        // Fetch the raw data from the database
        var rawData = historiqueFiche
            .Where(h => h.IdHistorique == historiqueId)  // Filter by IdHistorique
            .Select(h => new
            {
                h.Retirer,
                h.Ajouter
            })
            .FirstOrDefault();
        if (rawData != null)
        {
            informationToShow = new InformationToShowDTO
            {
                Retirer = JsonSerializer.Deserialize<Dictionary<string, string>>(rawData.Retirer),
                Ajouter = JsonSerializer.Deserialize<Dictionary<string, string>>(rawData.Ajouter)
            };
        }
    }

    private async Task FecthRefusedData()
    {

    }

    public class InformationToShowDTO
    {
        public Dictionary<string, string>? Retirer { get; set; }
        public Dictionary<string, string>? Ajouter { get; set; }
    }
}    
